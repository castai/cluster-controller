// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/castai/cluster-controller/actions (interfaces: Client)

// Package mock_actions is a generated GoMock package.
package mock_actions

import (
	context "context"
	reflect "reflect"

	types "github.com/castai/cluster-controller/types"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AckAction mocks base method.
func (m *MockClient) AckAction(arg0 context.Context, arg1 string, arg2 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckAction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckAction indicates an expected call of AckAction.
func (mr *MockClientMockRecorder) AckAction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckAction", reflect.TypeOf((*MockClient)(nil).AckAction), arg0, arg1, arg2)
}

// GetActions mocks base method.
func (m *MockClient) GetActions(arg0 context.Context, arg1 string) ([]*types.ClusterAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActions", arg0, arg1)
	ret0, _ := ret[0].([]*types.ClusterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActions indicates an expected call of GetActions.
func (mr *MockClientMockRecorder) GetActions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActions", reflect.TypeOf((*MockClient)(nil).GetActions), arg0, arg1)
}

// SendAKSInitData mocks base method.
func (m *MockClient) SendAKSInitData(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAKSInitData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAKSInitData indicates an expected call of SendAKSInitData.
func (mr *MockClientMockRecorder) SendAKSInitData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAKSInitData", reflect.TypeOf((*MockClient)(nil).SendAKSInitData), arg0, arg1, arg2, arg3)
}
