// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AutoscalerAPIGetAgentScript request
	AutoscalerAPIGetAgentScript(ctx context.Context, params *AutoscalerAPIGetAgentScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIListAuthTokens request
	AuthTokenAPIListAuthTokens(ctx context.Context, params *AuthTokenAPIListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPICreateAuthToken request with any body
	AuthTokenAPICreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthTokenAPICreateAuthToken(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIDeleteAuthToken request
	AuthTokenAPIDeleteAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIGetAuthToken request
	AuthTokenAPIGetAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIUpdateAuthToken request with any body
	AuthTokenAPIUpdateAuthTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthTokenAPIUpdateAuthToken(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetKarpenterDefinitionsMigrationIntent request
	AutoscalerAPIGetKarpenterDefinitionsMigrationIntent(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIMigrateKarpenterDefinitions request with any body
	AutoscalerAPIMigrateKarpenterDefinitionsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AutoscalerAPIMigrateKarpenterDefinitions(ctx context.Context, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetProblematicNodes request
	AutoscalerAPIGetProblematicNodes(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetProblematicWorkloads request
	AutoscalerAPIGetProblematicWorkloads(ctx context.Context, clusterId string, params *AutoscalerAPIGetProblematicWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetRebalancedWorkloads request
	AutoscalerAPIGetRebalancedWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIListRebalancingPlans request
	AutoscalerAPIListRebalancingPlans(ctx context.Context, clusterId string, params *AutoscalerAPIListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGenerateRebalancingPlan request with any body
	AutoscalerAPIGenerateRebalancingPlanWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AutoscalerAPIGenerateRebalancingPlan(ctx context.Context, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetRebalancingPlan request
	AutoscalerAPIGetRebalancingPlan(ctx context.Context, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIExecuteRebalancingPlan request
	AutoscalerAPIExecuteRebalancingPlan(ctx context.Context, clusterId string, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetClusterSettings request
	AutoscalerAPIGetClusterSettings(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AutoscalerAPIGetClusterWorkloads request
	AutoscalerAPIGetClusterWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIRegisterCluster request with any body
	ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetListNodesFilters request
	ExternalClusterAPIGetListNodesFilters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsAPIGetOperation request
	OperationsAPIGetOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIUpdateCluster request with any body
	ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteAssumeRolePrincipal request
	ExternalClusterAPIDeleteAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetAssumeRolePrincipal request
	ExternalClusterAPIGetAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPICreateAssumeRolePrincipal request
	ExternalClusterAPICreateAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetAssumeRoleUser request
	ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCleanupScript request
	ExternalClusterAPIGetCleanupScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDisconnectCluster request with any body
	ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIHandleCloudEvent request with any body
	ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGCPCreateSA request with any body
	ExternalClusterAPIGCPCreateSAWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIGCPCreateSA(ctx context.Context, clusterId string, body ExternalClusterAPIGCPCreateSAJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDisableGCPSA request
	ExternalClusterAPIDisableGCPSA(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGKECreateSA request with any body
	ExternalClusterAPIGKECreateSAWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIGKECreateSA(ctx context.Context, clusterId string, body ExternalClusterAPIGKECreateSAJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDisableGKESA request
	ExternalClusterAPIDisableGKESA(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPITriggerHibernateCluster request
	ExternalClusterAPITriggerHibernateCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIAddNode request with any body
	ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDrainNode request with any body
	ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIReconcileCluster request
	ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, params *ExternalClusterAPIReconcileClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPITriggerResumeCluster request with any body
	ExternalClusterAPITriggerResumeClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPITriggerResumeCluster(ctx context.Context, clusterId string, body ExternalClusterAPITriggerResumeClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIUpdateClusterTags request with any body
	ExternalClusterAPIUpdateClusterTagsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIUpdateClusterTags(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCleanupScriptTemplate request
	ExternalClusterAPIGetCleanupScriptTemplate(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AutoscalerAPIGetAgentScript(ctx context.Context, params *AutoscalerAPIGetAgentScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetAgentScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIListAuthTokens(ctx context.Context, params *AuthTokenAPIListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIListAuthTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPICreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPICreateAuthTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPICreateAuthToken(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPICreateAuthTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIDeleteAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIDeleteAuthTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIGetAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIGetAuthTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIUpdateAuthTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIUpdateAuthTokenRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIUpdateAuthToken(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIUpdateAuthTokenRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetKarpenterDefinitionsMigrationIntent(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetKarpenterDefinitionsMigrationIntentRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIMigrateKarpenterDefinitionsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIMigrateKarpenterDefinitionsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIMigrateKarpenterDefinitions(ctx context.Context, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIMigrateKarpenterDefinitionsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetProblematicNodes(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetProblematicNodesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetProblematicWorkloads(ctx context.Context, clusterId string, params *AutoscalerAPIGetProblematicWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetProblematicWorkloadsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetRebalancedWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetRebalancedWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIListRebalancingPlans(ctx context.Context, clusterId string, params *AutoscalerAPIListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIListRebalancingPlansRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGenerateRebalancingPlanWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGenerateRebalancingPlanRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGenerateRebalancingPlan(ctx context.Context, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGenerateRebalancingPlanRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetRebalancingPlan(ctx context.Context, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetRebalancingPlanRequest(c.Server, clusterId, rebalancingPlanId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIExecuteRebalancingPlan(ctx context.Context, clusterId string, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIExecuteRebalancingPlanRequest(c.Server, clusterId, rebalancingPlanId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetClusterSettings(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetClusterSettingsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AutoscalerAPIGetClusterWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAutoscalerAPIGetClusterWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetListNodesFilters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetListNodesFiltersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsAPIGetOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsAPIGetOperationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPICreateAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPICreateAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetAssumeRoleUserRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCleanupScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCleanupScriptRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIHandleCloudEventRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIHandleCloudEventRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGCPCreateSAWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGCPCreateSARequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGCPCreateSA(ctx context.Context, clusterId string, body ExternalClusterAPIGCPCreateSAJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGCPCreateSARequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisableGCPSA(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisableGCPSARequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGKECreateSAWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGKECreateSARequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGKECreateSA(ctx context.Context, clusterId string, body ExternalClusterAPIGKECreateSAJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGKECreateSARequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisableGKESA(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisableGKESARequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPITriggerHibernateCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPITriggerHibernateClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListNodesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteNodeRequest(c.Server, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequestWithBody(c.Server, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequest(c.Server, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, params *ExternalClusterAPIReconcileClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIReconcileClusterRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPITriggerResumeClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPITriggerResumeClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPITriggerResumeCluster(ctx context.Context, clusterId string, body ExternalClusterAPITriggerResumeClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPITriggerResumeClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterTagsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterTagsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterTags(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterTagsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPICreateClusterTokenRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCleanupScriptTemplate(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCleanupScriptTemplateRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptTemplateRequest(c.Server, provider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAutoscalerAPIGetAgentScriptRequest generates requests for AutoscalerAPIGetAgentScript
func NewAutoscalerAPIGetAgentScriptRequest(server string, params *AutoscalerAPIGetAgentScriptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/agent.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EksRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.region", runtime.ParamLocationQuery, *params.EksRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EksAccountId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.accountId", runtime.ParamLocationQuery, *params.EksAccountId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EksClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.clusterName", runtime.ParamLocationQuery, *params.EksClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.region", runtime.ParamLocationQuery, *params.GkeRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeProjectId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.projectId", runtime.ParamLocationQuery, *params.GkeProjectId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.clusterName", runtime.ParamLocationQuery, *params.GkeClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeLocation != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.location", runtime.ParamLocationQuery, *params.GkeLocation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsCsp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.csp", runtime.ParamLocationQuery, *params.KopsCsp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.region", runtime.ParamLocationQuery, *params.KopsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.clusterName", runtime.ParamLocationQuery, *params.KopsClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsStateStore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.stateStore", runtime.ParamLocationQuery, *params.KopsStateStore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksLocation != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.location", runtime.ParamLocationQuery, *params.AksLocation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksNodeResourceGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.nodeResourceGroup", runtime.ParamLocationQuery, *params.AksNodeResourceGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksSubscriptionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.subscriptionId", runtime.ParamLocationQuery, *params.AksSubscriptionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OpenshiftCsp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.csp", runtime.ParamLocationQuery, *params.OpenshiftCsp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OpenshiftRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.region", runtime.ParamLocationQuery, *params.OpenshiftRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OpenshiftClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.clusterName", runtime.ParamLocationQuery, *params.OpenshiftClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OpenshiftInternalId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.internalId", runtime.ParamLocationQuery, *params.OpenshiftInternalId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OpenshiftRunAsUser != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.runAsUser", runtime.ParamLocationQuery, *params.OpenshiftRunAsUser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OpenshiftRunAsGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.runAsGroup", runtime.ParamLocationQuery, *params.OpenshiftRunAsGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OpenshiftFsGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "openshift.fsGroup", runtime.ParamLocationQuery, *params.OpenshiftFsGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AnywhereClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "anywhere.clusterName", runtime.ParamLocationQuery, *params.AnywhereClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPIListAuthTokensRequest generates requests for AuthTokenAPIListAuthTokens
func NewAuthTokenAPIListAuthTokensRequest(server string, params *AuthTokenAPIListAuthTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPICreateAuthTokenRequest calls the generic AuthTokenAPICreateAuthToken builder with application/json body
func NewAuthTokenAPICreateAuthTokenRequest(server string, body AuthTokenAPICreateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthTokenAPICreateAuthTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthTokenAPICreateAuthTokenRequestWithBody generates requests for AuthTokenAPICreateAuthToken with any type of body
func NewAuthTokenAPICreateAuthTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthTokenAPIDeleteAuthTokenRequest generates requests for AuthTokenAPIDeleteAuthToken
func NewAuthTokenAPIDeleteAuthTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPIGetAuthTokenRequest generates requests for AuthTokenAPIGetAuthToken
func NewAuthTokenAPIGetAuthTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPIUpdateAuthTokenRequest calls the generic AuthTokenAPIUpdateAuthToken builder with application/json body
func NewAuthTokenAPIUpdateAuthTokenRequest(server string, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthTokenAPIUpdateAuthTokenRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAuthTokenAPIUpdateAuthTokenRequestWithBody generates requests for AuthTokenAPIUpdateAuthToken with any type of body
func NewAuthTokenAPIUpdateAuthTokenRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAutoscalerAPIGetKarpenterDefinitionsMigrationIntentRequest generates requests for AutoscalerAPIGetKarpenterDefinitionsMigrationIntent
func NewAutoscalerAPIGetKarpenterDefinitionsMigrationIntentRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/karpenter/migrate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIMigrateKarpenterDefinitionsRequest calls the generic AutoscalerAPIMigrateKarpenterDefinitions builder with application/json body
func NewAutoscalerAPIMigrateKarpenterDefinitionsRequest(server string, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAutoscalerAPIMigrateKarpenterDefinitionsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAutoscalerAPIMigrateKarpenterDefinitionsRequestWithBody generates requests for AutoscalerAPIMigrateKarpenterDefinitions with any type of body
func NewAutoscalerAPIMigrateKarpenterDefinitionsRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/karpenter/migrate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAutoscalerAPIGetProblematicNodesRequest generates requests for AutoscalerAPIGetProblematicNodes
func NewAutoscalerAPIGetProblematicNodesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/problematic-nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGetProblematicWorkloadsRequest generates requests for AutoscalerAPIGetProblematicWorkloads
func NewAutoscalerAPIGetProblematicWorkloadsRequest(server string, clusterId string, params *AutoscalerAPIGetProblematicWorkloadsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/problematic-workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AggressiveMode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aggressiveMode", runtime.ParamLocationQuery, *params.AggressiveMode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGetRebalancedWorkloadsRequest generates requests for AutoscalerAPIGetRebalancedWorkloads
func NewAutoscalerAPIGetRebalancedWorkloadsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalanced-workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIListRebalancingPlansRequest generates requests for AutoscalerAPIListRebalancingPlans
func NewAutoscalerAPIListRebalancingPlansRequest(server string, clusterId string, params *AutoscalerAPIListRebalancingPlansParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatuses != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.statuses", runtime.ParamLocationQuery, *params.FilterStatuses); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeOperations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeOperations", runtime.ParamLocationQuery, *params.IncludeOperations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeConfigurations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeConfigurations", runtime.ParamLocationQuery, *params.IncludeConfigurations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeNegative != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeNegative", runtime.ParamLocationQuery, *params.IncludeNegative); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGenerateRebalancingPlanRequest calls the generic AutoscalerAPIGenerateRebalancingPlan builder with application/json body
func NewAutoscalerAPIGenerateRebalancingPlanRequest(server string, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAutoscalerAPIGenerateRebalancingPlanRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAutoscalerAPIGenerateRebalancingPlanRequestWithBody generates requests for AutoscalerAPIGenerateRebalancingPlan with any type of body
func NewAutoscalerAPIGenerateRebalancingPlanRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAutoscalerAPIGetRebalancingPlanRequest generates requests for AutoscalerAPIGetRebalancingPlan
func NewAutoscalerAPIGetRebalancingPlanRequest(server string, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rebalancingPlanId", runtime.ParamLocationPath, rebalancingPlanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeOperations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeOperations", runtime.ParamLocationQuery, *params.IncludeOperations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeConfigurations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeConfigurations", runtime.ParamLocationQuery, *params.IncludeConfigurations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIExecuteRebalancingPlanRequest generates requests for AutoscalerAPIExecuteRebalancingPlan
func NewAutoscalerAPIExecuteRebalancingPlanRequest(server string, clusterId string, rebalancingPlanId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rebalancingPlanId", runtime.ParamLocationPath, rebalancingPlanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans/%s/execute", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGetClusterSettingsRequest generates requests for AutoscalerAPIGetClusterSettings
func NewAutoscalerAPIGetClusterSettingsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAutoscalerAPIGetClusterWorkloadsRequest generates requests for AutoscalerAPIGetClusterWorkloads
func NewAutoscalerAPIGetClusterWorkloadsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIListClustersRequest generates requests for ExternalClusterAPIListClusters
func NewExternalClusterAPIListClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIRegisterClusterRequest calls the generic ExternalClusterAPIRegisterCluster builder with application/json body
func NewExternalClusterAPIRegisterClusterRequest(server string, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIRegisterClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewExternalClusterAPIRegisterClusterRequestWithBody generates requests for ExternalClusterAPIRegisterCluster with any type of body
func NewExternalClusterAPIRegisterClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIGetListNodesFiltersRequest generates requests for ExternalClusterAPIGetListNodesFilters
func NewExternalClusterAPIGetListNodesFiltersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/filters/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperationsAPIGetOperationRequest generates requests for OperationsAPIGetOperation
func NewOperationsAPIGetOperationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/operations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDeleteClusterRequest generates requests for ExternalClusterAPIDeleteCluster
func NewExternalClusterAPIDeleteClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetClusterRequest generates requests for ExternalClusterAPIGetCluster
func NewExternalClusterAPIGetClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIUpdateClusterRequest calls the generic ExternalClusterAPIUpdateCluster builder with application/json body
func NewExternalClusterAPIUpdateClusterRequest(server string, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIUpdateClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIUpdateClusterRequestWithBody generates requests for ExternalClusterAPIUpdateCluster with any type of body
func NewExternalClusterAPIUpdateClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDeleteAssumeRolePrincipalRequest generates requests for ExternalClusterAPIDeleteAssumeRolePrincipal
func NewExternalClusterAPIDeleteAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetAssumeRolePrincipalRequest generates requests for ExternalClusterAPIGetAssumeRolePrincipal
func NewExternalClusterAPIGetAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPICreateAssumeRolePrincipalRequest generates requests for ExternalClusterAPICreateAssumeRolePrincipal
func NewExternalClusterAPICreateAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetAssumeRoleUserRequest generates requests for ExternalClusterAPIGetAssumeRoleUser
func NewExternalClusterAPIGetAssumeRoleUserRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCleanupScriptRequest generates requests for ExternalClusterAPIGetCleanupScript
func NewExternalClusterAPIGetCleanupScriptRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/cleanup-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptRequest generates requests for ExternalClusterAPIGetCredentialsScript
func NewExternalClusterAPIGetCredentialsScriptRequest(server string, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/credentials-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CrossRole != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crossRole", runtime.ParamLocationQuery, *params.CrossRole); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NvidiaDevicePlugin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nvidiaDevicePlugin", runtime.ParamLocationQuery, *params.NvidiaDevicePlugin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallSecurityAgent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installSecurityAgent", runtime.ParamLocationQuery, *params.InstallSecurityAgent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallAutoscalerAgent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installAutoscalerAgent", runtime.ParamLocationQuery, *params.InstallAutoscalerAgent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallGpuMetricsExporter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installGpuMetricsExporter", runtime.ParamLocationQuery, *params.InstallGpuMetricsExporter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallAiOptimizerProxy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installAiOptimizerProxy", runtime.ParamLocationQuery, *params.InstallAiOptimizerProxy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GcpSaImpersonate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gcpSaImpersonate", runtime.ParamLocationQuery, *params.GcpSaImpersonate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallNetflowExporter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installNetflowExporter", runtime.ParamLocationQuery, *params.InstallNetflowExporter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallWorkloadAutoscaler != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installWorkloadAutoscaler", runtime.ParamLocationQuery, *params.InstallWorkloadAutoscaler); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDisconnectClusterRequest calls the generic ExternalClusterAPIDisconnectCluster builder with application/json body
func NewExternalClusterAPIDisconnectClusterRequest(server string, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDisconnectClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIDisconnectClusterRequestWithBody generates requests for ExternalClusterAPIDisconnectCluster with any type of body
func NewExternalClusterAPIDisconnectClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/disconnect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIHandleCloudEventRequest calls the generic ExternalClusterAPIHandleCloudEvent builder with application/json body
func NewExternalClusterAPIHandleCloudEventRequest(server string, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIHandleCloudEventRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIHandleCloudEventRequestWithBody generates requests for ExternalClusterAPIHandleCloudEvent with any type of body
func NewExternalClusterAPIHandleCloudEventRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIGCPCreateSARequest calls the generic ExternalClusterAPIGCPCreateSA builder with application/json body
func NewExternalClusterAPIGCPCreateSARequest(server string, clusterId string, body ExternalClusterAPIGCPCreateSAJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIGCPCreateSARequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIGCPCreateSARequestWithBody generates requests for ExternalClusterAPIGCPCreateSA with any type of body
func NewExternalClusterAPIGCPCreateSARequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/gcp-create-sa", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDisableGCPSARequest generates requests for ExternalClusterAPIDisableGCPSA
func NewExternalClusterAPIDisableGCPSARequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/gcp-disable-sa", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGKECreateSARequest calls the generic ExternalClusterAPIGKECreateSA builder with application/json body
func NewExternalClusterAPIGKECreateSARequest(server string, clusterId string, body ExternalClusterAPIGKECreateSAJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIGKECreateSARequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIGKECreateSARequestWithBody generates requests for ExternalClusterAPIGKECreateSA with any type of body
func NewExternalClusterAPIGKECreateSARequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/gke-create-sa", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDisableGKESARequest generates requests for ExternalClusterAPIDisableGKESA
func NewExternalClusterAPIDisableGKESARequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/gke-disable-sa", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPITriggerHibernateClusterRequest generates requests for ExternalClusterAPITriggerHibernateCluster
func NewExternalClusterAPITriggerHibernateClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/hibernate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIListNodesRequest generates requests for ExternalClusterAPIListNodes
func NewExternalClusterAPIListNodesRequest(server string, clusterId string, params *ExternalClusterAPIListNodesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeId", runtime.ParamLocationQuery, *params.NodeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeStatus", runtime.ParamLocationQuery, *params.NodeStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstanceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceType", runtime.ParamLocationQuery, *params.InstanceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LifecycleType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifecycleType", runtime.ParamLocationQuery, *params.LifecycleType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RemovalDisabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "removalDisabled", runtime.ParamLocationQuery, *params.RemovalDisabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unschedulable != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unschedulable", runtime.ParamLocationQuery, *params.Unschedulable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeConfigurationName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeConfigurationName", runtime.ParamLocationQuery, *params.NodeConfigurationName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeConfigurationVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeConfigurationVersion", runtime.ParamLocationQuery, *params.NodeConfigurationVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTemplateName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeTemplateName", runtime.ParamLocationQuery, *params.NodeTemplateName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTemplateVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeTemplateVersion", runtime.ParamLocationQuery, *params.NodeTemplateVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeName", runtime.ParamLocationQuery, *params.NodeName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeDeleting != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeDeleting", runtime.ParamLocationQuery, *params.ExcludeDeleting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIAddNodeRequest calls the generic ExternalClusterAPIAddNode builder with application/json body
func NewExternalClusterAPIAddNodeRequest(server string, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIAddNodeRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIAddNodeRequestWithBody generates requests for ExternalClusterAPIAddNode with any type of body
func NewExternalClusterAPIAddNodeRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDeleteNodeRequest generates requests for ExternalClusterAPIDeleteNode
func NewExternalClusterAPIDeleteNodeRequest(server string, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DrainTimeout != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drainTimeout", runtime.ParamLocationQuery, *params.DrainTimeout); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceDelete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceDelete", runtime.ParamLocationQuery, *params.ForceDelete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetNodeRequest generates requests for ExternalClusterAPIGetNode
func NewExternalClusterAPIGetNodeRequest(server string, clusterId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDrainNodeRequest calls the generic ExternalClusterAPIDrainNode builder with application/json body
func NewExternalClusterAPIDrainNodeRequest(server string, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDrainNodeRequestWithBody(server, clusterId, nodeId, "application/json", bodyReader)
}

// NewExternalClusterAPIDrainNodeRequestWithBody generates requests for ExternalClusterAPIDrainNode with any type of body
func NewExternalClusterAPIDrainNodeRequestWithBody(server string, clusterId string, nodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s/drain", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIReconcileClusterRequest generates requests for ExternalClusterAPIReconcileCluster
func NewExternalClusterAPIReconcileClusterRequest(server string, clusterId string, params *ExternalClusterAPIReconcileClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/reconcile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SkipAksInitData != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipAksInitData", runtime.ParamLocationQuery, *params.SkipAksInitData); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPITriggerResumeClusterRequest calls the generic ExternalClusterAPITriggerResumeCluster builder with application/json body
func NewExternalClusterAPITriggerResumeClusterRequest(server string, clusterId string, body ExternalClusterAPITriggerResumeClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPITriggerResumeClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPITriggerResumeClusterRequestWithBody generates requests for ExternalClusterAPITriggerResumeCluster with any type of body
func NewExternalClusterAPITriggerResumeClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIUpdateClusterTagsRequest calls the generic ExternalClusterAPIUpdateClusterTags builder with application/json body
func NewExternalClusterAPIUpdateClusterTagsRequest(server string, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIUpdateClusterTagsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIUpdateClusterTagsRequestWithBody generates requests for ExternalClusterAPIUpdateClusterTags with any type of body
func NewExternalClusterAPIUpdateClusterTagsRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPICreateClusterTokenRequest generates requests for ExternalClusterAPICreateClusterToken
func NewExternalClusterAPICreateClusterTokenRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCleanupScriptTemplateRequest generates requests for ExternalClusterAPIGetCleanupScriptTemplate
func NewExternalClusterAPIGetCleanupScriptTemplateRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/cleanup.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptTemplateRequest generates requests for ExternalClusterAPIGetCredentialsScriptTemplate
func NewExternalClusterAPIGetCredentialsScriptTemplateRequest(server string, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/onboarding.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CrossRole != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crossRole", runtime.ParamLocationQuery, *params.CrossRole); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AutoscalerAPIGetAgentScript request
	AutoscalerAPIGetAgentScriptWithResponse(ctx context.Context, params *AutoscalerAPIGetAgentScriptParams) (*AutoscalerAPIGetAgentScriptResponse, error)

	// AuthTokenAPIListAuthTokens request
	AuthTokenAPIListAuthTokensWithResponse(ctx context.Context, params *AuthTokenAPIListAuthTokensParams) (*AuthTokenAPIListAuthTokensResponse, error)

	// AuthTokenAPICreateAuthToken request  with any body
	AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AuthTokenAPICreateAuthTokenResponse, error)

	AuthTokenAPICreateAuthTokenWithResponse(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody) (*AuthTokenAPICreateAuthTokenResponse, error)

	// AuthTokenAPIDeleteAuthToken request
	AuthTokenAPIDeleteAuthTokenWithResponse(ctx context.Context, id string) (*AuthTokenAPIDeleteAuthTokenResponse, error)

	// AuthTokenAPIGetAuthToken request
	AuthTokenAPIGetAuthTokenWithResponse(ctx context.Context, id string) (*AuthTokenAPIGetAuthTokenResponse, error)

	// AuthTokenAPIUpdateAuthToken request  with any body
	AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AuthTokenAPIUpdateAuthTokenResponse, error)

	AuthTokenAPIUpdateAuthTokenWithResponse(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*AuthTokenAPIUpdateAuthTokenResponse, error)

	// AutoscalerAPIGetKarpenterDefinitionsMigrationIntent request
	AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse, error)

	// AutoscalerAPIMigrateKarpenterDefinitions request  with any body
	AutoscalerAPIMigrateKarpenterDefinitionsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error)

	AutoscalerAPIMigrateKarpenterDefinitionsWithResponse(ctx context.Context, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error)

	// AutoscalerAPIGetProblematicNodes request
	AutoscalerAPIGetProblematicNodesWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetProblematicNodesResponse, error)

	// AutoscalerAPIGetProblematicWorkloads request
	AutoscalerAPIGetProblematicWorkloadsWithResponse(ctx context.Context, clusterId string, params *AutoscalerAPIGetProblematicWorkloadsParams) (*AutoscalerAPIGetProblematicWorkloadsResponse, error)

	// AutoscalerAPIGetRebalancedWorkloads request
	AutoscalerAPIGetRebalancedWorkloadsWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetRebalancedWorkloadsResponse, error)

	// AutoscalerAPIListRebalancingPlans request
	AutoscalerAPIListRebalancingPlansWithResponse(ctx context.Context, clusterId string, params *AutoscalerAPIListRebalancingPlansParams) (*AutoscalerAPIListRebalancingPlansResponse, error)

	// AutoscalerAPIGenerateRebalancingPlan request  with any body
	AutoscalerAPIGenerateRebalancingPlanWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*AutoscalerAPIGenerateRebalancingPlanResponse, error)

	AutoscalerAPIGenerateRebalancingPlanWithResponse(ctx context.Context, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody) (*AutoscalerAPIGenerateRebalancingPlanResponse, error)

	// AutoscalerAPIGetRebalancingPlan request
	AutoscalerAPIGetRebalancingPlanWithResponse(ctx context.Context, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams) (*AutoscalerAPIGetRebalancingPlanResponse, error)

	// AutoscalerAPIExecuteRebalancingPlan request
	AutoscalerAPIExecuteRebalancingPlanWithResponse(ctx context.Context, clusterId string, rebalancingPlanId string) (*AutoscalerAPIExecuteRebalancingPlanResponse, error)

	// AutoscalerAPIGetClusterSettings request
	AutoscalerAPIGetClusterSettingsWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetClusterSettingsResponse, error)

	// AutoscalerAPIGetClusterWorkloads request
	AutoscalerAPIGetClusterWorkloadsWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetClusterWorkloadsResponse, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClustersWithResponse(ctx context.Context) (*ExternalClusterAPIListClustersResponse, error)

	// ExternalClusterAPIRegisterCluster request  with any body
	ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ExternalClusterAPIRegisterClusterResponse, error)

	ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*ExternalClusterAPIRegisterClusterResponse, error)

	// ExternalClusterAPIGetListNodesFilters request
	ExternalClusterAPIGetListNodesFiltersWithResponse(ctx context.Context) (*ExternalClusterAPIGetListNodesFiltersResponse, error)

	// OperationsAPIGetOperation request
	OperationsAPIGetOperationWithResponse(ctx context.Context, id string) (*OperationsAPIGetOperationResponse, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteClusterResponse, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetClusterResponse, error)

	// ExternalClusterAPIUpdateCluster request  with any body
	ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterResponse, error)

	ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*ExternalClusterAPIUpdateClusterResponse, error)

	// ExternalClusterAPIDeleteAssumeRolePrincipal request
	ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error)

	// ExternalClusterAPIGetAssumeRolePrincipal request
	ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error)

	// ExternalClusterAPICreateAssumeRolePrincipal request
	ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error)

	// ExternalClusterAPIGetAssumeRoleUser request
	ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRoleUserResponse, error)

	// ExternalClusterAPIGetCleanupScript request
	ExternalClusterAPIGetCleanupScriptWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetCleanupScriptResponse, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*ExternalClusterAPIGetCredentialsScriptResponse, error)

	// ExternalClusterAPIDisconnectCluster request  with any body
	ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIDisconnectClusterResponse, error)

	ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*ExternalClusterAPIDisconnectClusterResponse, error)

	// ExternalClusterAPIHandleCloudEvent request  with any body
	ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIHandleCloudEventResponse, error)

	ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*ExternalClusterAPIHandleCloudEventResponse, error)

	// ExternalClusterAPIGCPCreateSA request  with any body
	ExternalClusterAPIGCPCreateSAWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIGCPCreateSAResponse, error)

	ExternalClusterAPIGCPCreateSAWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIGCPCreateSAJSONRequestBody) (*ExternalClusterAPIGCPCreateSAResponse, error)

	// ExternalClusterAPIDisableGCPSA request
	ExternalClusterAPIDisableGCPSAWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDisableGCPSAResponse, error)

	// ExternalClusterAPIGKECreateSA request  with any body
	ExternalClusterAPIGKECreateSAWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIGKECreateSAResponse, error)

	ExternalClusterAPIGKECreateSAWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIGKECreateSAJSONRequestBody) (*ExternalClusterAPIGKECreateSAResponse, error)

	// ExternalClusterAPIDisableGKESA request
	ExternalClusterAPIDisableGKESAWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDisableGKESAResponse, error)

	// ExternalClusterAPITriggerHibernateCluster request
	ExternalClusterAPITriggerHibernateClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPITriggerHibernateClusterResponse, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams) (*ExternalClusterAPIListNodesResponse, error)

	// ExternalClusterAPIAddNode request  with any body
	ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIAddNodeResponse, error)

	ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*ExternalClusterAPIAddNodeResponse, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*ExternalClusterAPIDeleteNodeResponse, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string) (*ExternalClusterAPIGetNodeResponse, error)

	// ExternalClusterAPIDrainNode request  with any body
	ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader) (*ExternalClusterAPIDrainNodeResponse, error)

	ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*ExternalClusterAPIDrainNodeResponse, error)

	// ExternalClusterAPIReconcileCluster request
	ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIReconcileClusterParams) (*ExternalClusterAPIReconcileClusterResponse, error)

	// ExternalClusterAPITriggerResumeCluster request  with any body
	ExternalClusterAPITriggerResumeClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPITriggerResumeClusterResponse, error)

	ExternalClusterAPITriggerResumeClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPITriggerResumeClusterJSONRequestBody) (*ExternalClusterAPITriggerResumeClusterResponse, error)

	// ExternalClusterAPIUpdateClusterTags request  with any body
	ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterTagsResponse, error)

	ExternalClusterAPIUpdateClusterTagsWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody) (*ExternalClusterAPIUpdateClusterTagsResponse, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateClusterTokenResponse, error)

	// ExternalClusterAPIGetCleanupScriptTemplate request
	ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx context.Context, provider string) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error)
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
type Response interface {
	Status() string
	StatusCode() int
	GetBody() []byte
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGetAgentScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetAgentScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetAgentScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGetAgentScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPIListAuthTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1ListAuthTokensResponse
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIListAuthTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIListAuthTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPIListAuthTokensResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPICreateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPICreateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPICreateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPICreateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPIDeleteAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1DeleteAuthTokenResponse
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIDeleteAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIDeleteAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPIDeleteAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPIGetAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIGetAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIGetAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPIGetAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPIUpdateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIUpdateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIUpdateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPIUpdateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetKarpenterMigrationIntentResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIMigrateKarpenterDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1MigrateKarpenterDefinitionsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIMigrateKarpenterDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIMigrateKarpenterDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIMigrateKarpenterDefinitionsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGetProblematicNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetProblematicNodesResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetProblematicNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetProblematicNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGetProblematicNodesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGetProblematicWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetProblematicWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetProblematicWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetProblematicWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGetProblematicWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGetRebalancedWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetRebalancedWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetRebalancedWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGetRebalancedWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIListRebalancingPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1ListRebalancingPlansResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIListRebalancingPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIListRebalancingPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIListRebalancingPlansResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGenerateRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CastaiAutoscalerV1beta1GenerateRebalancingPlanResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGenerateRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGenerateRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGenerateRebalancingPlanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGetRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1RebalancingPlanResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGetRebalancingPlanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIExecuteRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CastaiAutoscalerV1beta1RebalancingPlanResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIExecuteRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIExecuteRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIExecuteRebalancingPlanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGetClusterSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetClusterSettingsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetClusterSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetClusterSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGetClusterSettingsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AutoscalerAPIGetClusterWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAutoscalerV1beta1GetClusterWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r AutoscalerAPIGetClusterWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AutoscalerAPIGetClusterWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AutoscalerAPIGetClusterWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListClustersResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIListClustersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIRegisterClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIRegisterClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIRegisterClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIRegisterClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetListNodesFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetListNodesFiltersResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetListNodesFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetListNodesFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetListNodesFiltersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type OperationsAPIGetOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiOperationsV1beta1Operation
}

// Status returns HTTPResponse.Status
func (r OperationsAPIGetOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsAPIGetOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r OperationsAPIGetOperationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIUpdateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIUpdateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIUpdateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIUpdateClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DeleteAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteAssumeRolePrincipalResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetAssumeRolePrincipalResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPICreateAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1CreateAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPICreateAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPICreateAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPICreateAssumeRolePrincipalResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetAssumeRoleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetAssumeRoleUserResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetAssumeRoleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetAssumeRoleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetAssumeRoleUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCleanupScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetCleanupScriptResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCleanupScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCleanupScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCleanupScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCredentialsScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetCredentialsScriptResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCredentialsScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDisconnectClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDisconnectClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDisconnectClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDisconnectClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIHandleCloudEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1HandleCloudEventResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIHandleCloudEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIHandleCloudEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIHandleCloudEventResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGCPCreateSAResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GCPCreateSAResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGCPCreateSAResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGCPCreateSAResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGCPCreateSAResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDisableGCPSAResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DisableGCPSAResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDisableGCPSAResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDisableGCPSAResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDisableGCPSAResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGKECreateSAResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GKECreateSAResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGKECreateSAResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGKECreateSAResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGKECreateSAResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDisableGKESAResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DisableGKESAResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDisableGKESAResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDisableGKESAResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDisableGKESAResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPITriggerHibernateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1TriggerHibernateClusterResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPITriggerHibernateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPITriggerHibernateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPITriggerHibernateClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIListNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListNodesResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIListNodesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIAddNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1AddNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIAddNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIAddNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIAddNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DeleteNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Node
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDrainNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DrainNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDrainNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDrainNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDrainNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIReconcileClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ReconcileClusterResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIReconcileClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIReconcileClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIReconcileClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPITriggerResumeClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1TriggerResumeClusterResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPITriggerResumeClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPITriggerResumeClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPITriggerResumeClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIUpdateClusterTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1UpdateClusterTagsResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIUpdateClusterTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIUpdateClusterTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIUpdateClusterTagsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPICreateClusterTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1CreateClusterTokenResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPICreateClusterTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPICreateClusterTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPICreateClusterTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCleanupScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCleanupScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCleanupScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCleanupScriptTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCredentialsScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

// AutoscalerAPIGetAgentScriptWithResponse request returning *AutoscalerAPIGetAgentScriptResponse
func (c *ClientWithResponses) AutoscalerAPIGetAgentScriptWithResponse(ctx context.Context, params *AutoscalerAPIGetAgentScriptParams) (*AutoscalerAPIGetAgentScriptResponse, error) {
	rsp, err := c.AutoscalerAPIGetAgentScript(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetAgentScriptResponse(rsp)
}

// AuthTokenAPIListAuthTokensWithResponse request returning *AuthTokenAPIListAuthTokensResponse
func (c *ClientWithResponses) AuthTokenAPIListAuthTokensWithResponse(ctx context.Context, params *AuthTokenAPIListAuthTokensParams) (*AuthTokenAPIListAuthTokensResponse, error) {
	rsp, err := c.AuthTokenAPIListAuthTokens(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIListAuthTokensResponse(rsp)
}

// AuthTokenAPICreateAuthTokenWithBodyWithResponse request with arbitrary body returning *AuthTokenAPICreateAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AuthTokenAPICreateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPICreateAuthTokenWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPICreateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) AuthTokenAPICreateAuthTokenWithResponse(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody) (*AuthTokenAPICreateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPICreateAuthToken(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPICreateAuthTokenResponse(rsp)
}

// AuthTokenAPIDeleteAuthTokenWithResponse request returning *AuthTokenAPIDeleteAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIDeleteAuthTokenWithResponse(ctx context.Context, id string) (*AuthTokenAPIDeleteAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIDeleteAuthToken(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIDeleteAuthTokenResponse(rsp)
}

// AuthTokenAPIGetAuthTokenWithResponse request returning *AuthTokenAPIGetAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIGetAuthTokenWithResponse(ctx context.Context, id string) (*AuthTokenAPIGetAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIGetAuthToken(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIGetAuthTokenResponse(rsp)
}

// AuthTokenAPIUpdateAuthTokenWithBodyWithResponse request with arbitrary body returning *AuthTokenAPIUpdateAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIUpdateAuthTokenWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIUpdateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) AuthTokenAPIUpdateAuthTokenWithResponse(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIUpdateAuthToken(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIUpdateAuthTokenResponse(rsp)
}

// AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse request returning *AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse
func (c *ClientWithResponses) AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse, error) {
	rsp, err := c.AutoscalerAPIGetKarpenterDefinitionsMigrationIntent(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse(rsp)
}

// AutoscalerAPIMigrateKarpenterDefinitionsWithBodyWithResponse request with arbitrary body returning *AutoscalerAPIMigrateKarpenterDefinitionsResponse
func (c *ClientWithResponses) AutoscalerAPIMigrateKarpenterDefinitionsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error) {
	rsp, err := c.AutoscalerAPIMigrateKarpenterDefinitionsWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIMigrateKarpenterDefinitionsResponse(rsp)
}

func (c *ClientWithResponses) AutoscalerAPIMigrateKarpenterDefinitionsWithResponse(ctx context.Context, clusterId string, body AutoscalerAPIMigrateKarpenterDefinitionsJSONRequestBody) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error) {
	rsp, err := c.AutoscalerAPIMigrateKarpenterDefinitions(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIMigrateKarpenterDefinitionsResponse(rsp)
}

// AutoscalerAPIGetProblematicNodesWithResponse request returning *AutoscalerAPIGetProblematicNodesResponse
func (c *ClientWithResponses) AutoscalerAPIGetProblematicNodesWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetProblematicNodesResponse, error) {
	rsp, err := c.AutoscalerAPIGetProblematicNodes(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetProblematicNodesResponse(rsp)
}

// AutoscalerAPIGetProblematicWorkloadsWithResponse request returning *AutoscalerAPIGetProblematicWorkloadsResponse
func (c *ClientWithResponses) AutoscalerAPIGetProblematicWorkloadsWithResponse(ctx context.Context, clusterId string, params *AutoscalerAPIGetProblematicWorkloadsParams) (*AutoscalerAPIGetProblematicWorkloadsResponse, error) {
	rsp, err := c.AutoscalerAPIGetProblematicWorkloads(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetProblematicWorkloadsResponse(rsp)
}

// AutoscalerAPIGetRebalancedWorkloadsWithResponse request returning *AutoscalerAPIGetRebalancedWorkloadsResponse
func (c *ClientWithResponses) AutoscalerAPIGetRebalancedWorkloadsWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetRebalancedWorkloadsResponse, error) {
	rsp, err := c.AutoscalerAPIGetRebalancedWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetRebalancedWorkloadsResponse(rsp)
}

// AutoscalerAPIListRebalancingPlansWithResponse request returning *AutoscalerAPIListRebalancingPlansResponse
func (c *ClientWithResponses) AutoscalerAPIListRebalancingPlansWithResponse(ctx context.Context, clusterId string, params *AutoscalerAPIListRebalancingPlansParams) (*AutoscalerAPIListRebalancingPlansResponse, error) {
	rsp, err := c.AutoscalerAPIListRebalancingPlans(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIListRebalancingPlansResponse(rsp)
}

// AutoscalerAPIGenerateRebalancingPlanWithBodyWithResponse request with arbitrary body returning *AutoscalerAPIGenerateRebalancingPlanResponse
func (c *ClientWithResponses) AutoscalerAPIGenerateRebalancingPlanWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*AutoscalerAPIGenerateRebalancingPlanResponse, error) {
	rsp, err := c.AutoscalerAPIGenerateRebalancingPlanWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGenerateRebalancingPlanResponse(rsp)
}

func (c *ClientWithResponses) AutoscalerAPIGenerateRebalancingPlanWithResponse(ctx context.Context, clusterId string, body AutoscalerAPIGenerateRebalancingPlanJSONRequestBody) (*AutoscalerAPIGenerateRebalancingPlanResponse, error) {
	rsp, err := c.AutoscalerAPIGenerateRebalancingPlan(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGenerateRebalancingPlanResponse(rsp)
}

// AutoscalerAPIGetRebalancingPlanWithResponse request returning *AutoscalerAPIGetRebalancingPlanResponse
func (c *ClientWithResponses) AutoscalerAPIGetRebalancingPlanWithResponse(ctx context.Context, clusterId string, rebalancingPlanId string, params *AutoscalerAPIGetRebalancingPlanParams) (*AutoscalerAPIGetRebalancingPlanResponse, error) {
	rsp, err := c.AutoscalerAPIGetRebalancingPlan(ctx, clusterId, rebalancingPlanId, params)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetRebalancingPlanResponse(rsp)
}

// AutoscalerAPIExecuteRebalancingPlanWithResponse request returning *AutoscalerAPIExecuteRebalancingPlanResponse
func (c *ClientWithResponses) AutoscalerAPIExecuteRebalancingPlanWithResponse(ctx context.Context, clusterId string, rebalancingPlanId string) (*AutoscalerAPIExecuteRebalancingPlanResponse, error) {
	rsp, err := c.AutoscalerAPIExecuteRebalancingPlan(ctx, clusterId, rebalancingPlanId)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIExecuteRebalancingPlanResponse(rsp)
}

// AutoscalerAPIGetClusterSettingsWithResponse request returning *AutoscalerAPIGetClusterSettingsResponse
func (c *ClientWithResponses) AutoscalerAPIGetClusterSettingsWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetClusterSettingsResponse, error) {
	rsp, err := c.AutoscalerAPIGetClusterSettings(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetClusterSettingsResponse(rsp)
}

// AutoscalerAPIGetClusterWorkloadsWithResponse request returning *AutoscalerAPIGetClusterWorkloadsResponse
func (c *ClientWithResponses) AutoscalerAPIGetClusterWorkloadsWithResponse(ctx context.Context, clusterId string) (*AutoscalerAPIGetClusterWorkloadsResponse, error) {
	rsp, err := c.AutoscalerAPIGetClusterWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseAutoscalerAPIGetClusterWorkloadsResponse(rsp)
}

// ExternalClusterAPIListClustersWithResponse request returning *ExternalClusterAPIListClustersResponse
func (c *ClientWithResponses) ExternalClusterAPIListClustersWithResponse(ctx context.Context) (*ExternalClusterAPIListClustersResponse, error) {
	rsp, err := c.ExternalClusterAPIListClusters(ctx)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListClustersResponse(rsp)
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIRegisterClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterClusterWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterCluster(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

// ExternalClusterAPIGetListNodesFiltersWithResponse request returning *ExternalClusterAPIGetListNodesFiltersResponse
func (c *ClientWithResponses) ExternalClusterAPIGetListNodesFiltersWithResponse(ctx context.Context) (*ExternalClusterAPIGetListNodesFiltersResponse, error) {
	rsp, err := c.ExternalClusterAPIGetListNodesFilters(ctx)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetListNodesFiltersResponse(rsp)
}

// OperationsAPIGetOperationWithResponse request returning *OperationsAPIGetOperationResponse
func (c *ClientWithResponses) OperationsAPIGetOperationWithResponse(ctx context.Context, id string) (*OperationsAPIGetOperationResponse, error) {
	rsp, err := c.OperationsAPIGetOperation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseOperationsAPIGetOperationResponse(rsp)
}

// ExternalClusterAPIDeleteClusterWithResponse request returning *ExternalClusterAPIDeleteClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteClusterResponse(rsp)
}

// ExternalClusterAPIGetClusterWithResponse request returning *ExternalClusterAPIGetClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetClusterResponse(rsp)
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIUpdateClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

// ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse request returning *ExternalClusterAPIDeleteAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteAssumeRolePrincipal(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPIGetAssumeRolePrincipalWithResponse request returning *ExternalClusterAPIGetAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPIGetAssumeRolePrincipal(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPICreateAssumeRolePrincipalWithResponse request returning *ExternalClusterAPICreateAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPICreateAssumeRolePrincipal(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPICreateAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPIGetAssumeRoleUserWithResponse request returning *ExternalClusterAPIGetAssumeRoleUserResponse
func (c *ClientWithResponses) ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	rsp, err := c.ExternalClusterAPIGetAssumeRoleUser(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetAssumeRoleUserResponse(rsp)
}

// ExternalClusterAPIGetCleanupScriptWithResponse request returning *ExternalClusterAPIGetCleanupScriptResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCleanupScriptWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetCleanupScriptResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCleanupScript(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCleanupScriptResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptWithResponse request returning *ExternalClusterAPIGetCredentialsScriptResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScript(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptResponse(rsp)
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDisconnectClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

// ExternalClusterAPIHandleCloudEventWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIHandleCloudEventResponse
func (c *ClientWithResponses) ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	rsp, err := c.ExternalClusterAPIHandleCloudEventWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIHandleCloudEventResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	rsp, err := c.ExternalClusterAPIHandleCloudEvent(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIHandleCloudEventResponse(rsp)
}

// ExternalClusterAPIGCPCreateSAWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIGCPCreateSAResponse
func (c *ClientWithResponses) ExternalClusterAPIGCPCreateSAWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIGCPCreateSAResponse, error) {
	rsp, err := c.ExternalClusterAPIGCPCreateSAWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGCPCreateSAResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIGCPCreateSAWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIGCPCreateSAJSONRequestBody) (*ExternalClusterAPIGCPCreateSAResponse, error) {
	rsp, err := c.ExternalClusterAPIGCPCreateSA(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGCPCreateSAResponse(rsp)
}

// ExternalClusterAPIDisableGCPSAWithResponse request returning *ExternalClusterAPIDisableGCPSAResponse
func (c *ClientWithResponses) ExternalClusterAPIDisableGCPSAWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDisableGCPSAResponse, error) {
	rsp, err := c.ExternalClusterAPIDisableGCPSA(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisableGCPSAResponse(rsp)
}

// ExternalClusterAPIGKECreateSAWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIGKECreateSAResponse
func (c *ClientWithResponses) ExternalClusterAPIGKECreateSAWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIGKECreateSAResponse, error) {
	rsp, err := c.ExternalClusterAPIGKECreateSAWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGKECreateSAResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIGKECreateSAWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIGKECreateSAJSONRequestBody) (*ExternalClusterAPIGKECreateSAResponse, error) {
	rsp, err := c.ExternalClusterAPIGKECreateSA(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGKECreateSAResponse(rsp)
}

// ExternalClusterAPIDisableGKESAWithResponse request returning *ExternalClusterAPIDisableGKESAResponse
func (c *ClientWithResponses) ExternalClusterAPIDisableGKESAWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDisableGKESAResponse, error) {
	rsp, err := c.ExternalClusterAPIDisableGKESA(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisableGKESAResponse(rsp)
}

// ExternalClusterAPITriggerHibernateClusterWithResponse request returning *ExternalClusterAPITriggerHibernateClusterResponse
func (c *ClientWithResponses) ExternalClusterAPITriggerHibernateClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPITriggerHibernateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPITriggerHibernateCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPITriggerHibernateClusterResponse(rsp)
}

// ExternalClusterAPIListNodesWithResponse request returning *ExternalClusterAPIListNodesResponse
func (c *ClientWithResponses) ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams) (*ExternalClusterAPIListNodesResponse, error) {
	rsp, err := c.ExternalClusterAPIListNodes(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListNodesResponse(rsp)
}

// ExternalClusterAPIAddNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIAddNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNodeWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNode(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

// ExternalClusterAPIDeleteNodeWithResponse request returning *ExternalClusterAPIDeleteNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*ExternalClusterAPIDeleteNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteNode(ctx, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteNodeResponse(rsp)
}

// ExternalClusterAPIGetNodeWithResponse request returning *ExternalClusterAPIGetNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string) (*ExternalClusterAPIGetNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIGetNode(ctx, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetNodeResponse(rsp)
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDrainNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNodeWithBody(ctx, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNode(ctx, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

// ExternalClusterAPIReconcileClusterWithResponse request returning *ExternalClusterAPIReconcileClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIReconcileClusterParams) (*ExternalClusterAPIReconcileClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIReconcileCluster(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIReconcileClusterResponse(rsp)
}

// ExternalClusterAPITriggerResumeClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPITriggerResumeClusterResponse
func (c *ClientWithResponses) ExternalClusterAPITriggerResumeClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPITriggerResumeClusterResponse, error) {
	rsp, err := c.ExternalClusterAPITriggerResumeClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPITriggerResumeClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPITriggerResumeClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPITriggerResumeClusterJSONRequestBody) (*ExternalClusterAPITriggerResumeClusterResponse, error) {
	rsp, err := c.ExternalClusterAPITriggerResumeCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPITriggerResumeClusterResponse(rsp)
}

// ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIUpdateClusterTagsResponse
func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterTagsWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterTagsResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterTagsWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterTags(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterTagsResponse(rsp)
}

// ExternalClusterAPICreateClusterTokenWithResponse request returning *ExternalClusterAPICreateClusterTokenResponse
func (c *ClientWithResponses) ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	rsp, err := c.ExternalClusterAPICreateClusterToken(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPICreateClusterTokenResponse(rsp)
}

// ExternalClusterAPIGetCleanupScriptTemplateWithResponse request returning *ExternalClusterAPIGetCleanupScriptTemplateResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx context.Context, provider string) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCleanupScriptTemplate(ctx, provider)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCleanupScriptTemplateResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse request returning *ExternalClusterAPIGetCredentialsScriptTemplateResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScriptTemplate(ctx, provider, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp)
}

// ParseAutoscalerAPIGetAgentScriptResponse parses an HTTP response from a AutoscalerAPIGetAgentScriptWithResponse call
func ParseAutoscalerAPIGetAgentScriptResponse(rsp *http.Response) (*AutoscalerAPIGetAgentScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetAgentScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIListAuthTokensResponse parses an HTTP response from a AuthTokenAPIListAuthTokensWithResponse call
func ParseAuthTokenAPIListAuthTokensResponse(rsp *http.Response) (*AuthTokenAPIListAuthTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIListAuthTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1ListAuthTokensResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPICreateAuthTokenResponse parses an HTTP response from a AuthTokenAPICreateAuthTokenWithResponse call
func ParseAuthTokenAPICreateAuthTokenResponse(rsp *http.Response) (*AuthTokenAPICreateAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPICreateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIDeleteAuthTokenResponse parses an HTTP response from a AuthTokenAPIDeleteAuthTokenWithResponse call
func ParseAuthTokenAPIDeleteAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIDeleteAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIDeleteAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1DeleteAuthTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIGetAuthTokenResponse parses an HTTP response from a AuthTokenAPIGetAuthTokenWithResponse call
func ParseAuthTokenAPIGetAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIGetAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIGetAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIUpdateAuthTokenResponse parses an HTTP response from a AuthTokenAPIUpdateAuthTokenWithResponse call
func ParseAuthTokenAPIUpdateAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIUpdateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse parses an HTTP response from a AutoscalerAPIGetKarpenterDefinitionsMigrationIntentWithResponse call
func ParseAutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse(rsp *http.Response) (*AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetKarpenterDefinitionsMigrationIntentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetKarpenterMigrationIntentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIMigrateKarpenterDefinitionsResponse parses an HTTP response from a AutoscalerAPIMigrateKarpenterDefinitionsWithResponse call
func ParseAutoscalerAPIMigrateKarpenterDefinitionsResponse(rsp *http.Response) (*AutoscalerAPIMigrateKarpenterDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIMigrateKarpenterDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1MigrateKarpenterDefinitionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetProblematicNodesResponse parses an HTTP response from a AutoscalerAPIGetProblematicNodesWithResponse call
func ParseAutoscalerAPIGetProblematicNodesResponse(rsp *http.Response) (*AutoscalerAPIGetProblematicNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetProblematicNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetProblematicNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetProblematicWorkloadsResponse parses an HTTP response from a AutoscalerAPIGetProblematicWorkloadsWithResponse call
func ParseAutoscalerAPIGetProblematicWorkloadsResponse(rsp *http.Response) (*AutoscalerAPIGetProblematicWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetProblematicWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetProblematicWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetRebalancedWorkloadsResponse parses an HTTP response from a AutoscalerAPIGetRebalancedWorkloadsWithResponse call
func ParseAutoscalerAPIGetRebalancedWorkloadsResponse(rsp *http.Response) (*AutoscalerAPIGetRebalancedWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetRebalancedWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetRebalancedWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIListRebalancingPlansResponse parses an HTTP response from a AutoscalerAPIListRebalancingPlansWithResponse call
func ParseAutoscalerAPIListRebalancingPlansResponse(rsp *http.Response) (*AutoscalerAPIListRebalancingPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIListRebalancingPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1ListRebalancingPlansResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGenerateRebalancingPlanResponse parses an HTTP response from a AutoscalerAPIGenerateRebalancingPlanWithResponse call
func ParseAutoscalerAPIGenerateRebalancingPlanResponse(rsp *http.Response) (*AutoscalerAPIGenerateRebalancingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGenerateRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CastaiAutoscalerV1beta1GenerateRebalancingPlanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetRebalancingPlanResponse parses an HTTP response from a AutoscalerAPIGetRebalancingPlanWithResponse call
func ParseAutoscalerAPIGetRebalancingPlanResponse(rsp *http.Response) (*AutoscalerAPIGetRebalancingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1RebalancingPlanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIExecuteRebalancingPlanResponse parses an HTTP response from a AutoscalerAPIExecuteRebalancingPlanWithResponse call
func ParseAutoscalerAPIExecuteRebalancingPlanResponse(rsp *http.Response) (*AutoscalerAPIExecuteRebalancingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIExecuteRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CastaiAutoscalerV1beta1RebalancingPlanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetClusterSettingsResponse parses an HTTP response from a AutoscalerAPIGetClusterSettingsWithResponse call
func ParseAutoscalerAPIGetClusterSettingsResponse(rsp *http.Response) (*AutoscalerAPIGetClusterSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetClusterSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetClusterSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAutoscalerAPIGetClusterWorkloadsResponse parses an HTTP response from a AutoscalerAPIGetClusterWorkloadsWithResponse call
func ParseAutoscalerAPIGetClusterWorkloadsResponse(rsp *http.Response) (*AutoscalerAPIGetClusterWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AutoscalerAPIGetClusterWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAutoscalerV1beta1GetClusterWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListClustersResponse parses an HTTP response from a ExternalClusterAPIListClustersWithResponse call
func ParseExternalClusterAPIListClustersResponse(rsp *http.Response) (*ExternalClusterAPIListClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIRegisterClusterResponse parses an HTTP response from a ExternalClusterAPIRegisterClusterWithResponse call
func ParseExternalClusterAPIRegisterClusterResponse(rsp *http.Response) (*ExternalClusterAPIRegisterClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIRegisterClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetListNodesFiltersResponse parses an HTTP response from a ExternalClusterAPIGetListNodesFiltersWithResponse call
func ParseExternalClusterAPIGetListNodesFiltersResponse(rsp *http.Response) (*ExternalClusterAPIGetListNodesFiltersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetListNodesFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetListNodesFiltersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOperationsAPIGetOperationResponse parses an HTTP response from a OperationsAPIGetOperationWithResponse call
func ParseOperationsAPIGetOperationResponse(rsp *http.Response) (*OperationsAPIGetOperationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &OperationsAPIGetOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiOperationsV1beta1Operation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteClusterResponse parses an HTTP response from a ExternalClusterAPIDeleteClusterWithResponse call
func ParseExternalClusterAPIDeleteClusterResponse(rsp *http.Response) (*ExternalClusterAPIDeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetClusterResponse parses an HTTP response from a ExternalClusterAPIGetClusterWithResponse call
func ParseExternalClusterAPIGetClusterResponse(rsp *http.Response) (*ExternalClusterAPIGetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIUpdateClusterResponse parses an HTTP response from a ExternalClusterAPIUpdateClusterWithResponse call
func ParseExternalClusterAPIUpdateClusterResponse(rsp *http.Response) (*ExternalClusterAPIUpdateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIUpdateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DeleteAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPIGetAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPIGetAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPICreateAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPICreateAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPICreateAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPICreateAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1CreateAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetAssumeRoleUserResponse parses an HTTP response from a ExternalClusterAPIGetAssumeRoleUserWithResponse call
func ParseExternalClusterAPIGetAssumeRoleUserResponse(rsp *http.Response) (*ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetAssumeRoleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetAssumeRoleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCleanupScriptResponse parses an HTTP response from a ExternalClusterAPIGetCleanupScriptWithResponse call
func ParseExternalClusterAPIGetCleanupScriptResponse(rsp *http.Response) (*ExternalClusterAPIGetCleanupScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCleanupScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetCleanupScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetCredentialsScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDisconnectClusterResponse parses an HTTP response from a ExternalClusterAPIDisconnectClusterWithResponse call
func ParseExternalClusterAPIDisconnectClusterResponse(rsp *http.Response) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDisconnectClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIHandleCloudEventResponse parses an HTTP response from a ExternalClusterAPIHandleCloudEventWithResponse call
func ParseExternalClusterAPIHandleCloudEventResponse(rsp *http.Response) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIHandleCloudEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1HandleCloudEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGCPCreateSAResponse parses an HTTP response from a ExternalClusterAPIGCPCreateSAWithResponse call
func ParseExternalClusterAPIGCPCreateSAResponse(rsp *http.Response) (*ExternalClusterAPIGCPCreateSAResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGCPCreateSAResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GCPCreateSAResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDisableGCPSAResponse parses an HTTP response from a ExternalClusterAPIDisableGCPSAWithResponse call
func ParseExternalClusterAPIDisableGCPSAResponse(rsp *http.Response) (*ExternalClusterAPIDisableGCPSAResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDisableGCPSAResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DisableGCPSAResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGKECreateSAResponse parses an HTTP response from a ExternalClusterAPIGKECreateSAWithResponse call
func ParseExternalClusterAPIGKECreateSAResponse(rsp *http.Response) (*ExternalClusterAPIGKECreateSAResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGKECreateSAResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GKECreateSAResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDisableGKESAResponse parses an HTTP response from a ExternalClusterAPIDisableGKESAWithResponse call
func ParseExternalClusterAPIDisableGKESAResponse(rsp *http.Response) (*ExternalClusterAPIDisableGKESAResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDisableGKESAResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DisableGKESAResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPITriggerHibernateClusterResponse parses an HTTP response from a ExternalClusterAPITriggerHibernateClusterWithResponse call
func ParseExternalClusterAPITriggerHibernateClusterResponse(rsp *http.Response) (*ExternalClusterAPITriggerHibernateClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPITriggerHibernateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1TriggerHibernateClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListNodesResponse parses an HTTP response from a ExternalClusterAPIListNodesWithResponse call
func ParseExternalClusterAPIListNodesResponse(rsp *http.Response) (*ExternalClusterAPIListNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIAddNodeResponse parses an HTTP response from a ExternalClusterAPIAddNodeWithResponse call
func ParseExternalClusterAPIAddNodeResponse(rsp *http.Response) (*ExternalClusterAPIAddNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIAddNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1AddNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteNodeResponse parses an HTTP response from a ExternalClusterAPIDeleteNodeWithResponse call
func ParseExternalClusterAPIDeleteNodeResponse(rsp *http.Response) (*ExternalClusterAPIDeleteNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DeleteNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetNodeResponse parses an HTTP response from a ExternalClusterAPIGetNodeWithResponse call
func ParseExternalClusterAPIGetNodeResponse(rsp *http.Response) (*ExternalClusterAPIGetNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDrainNodeResponse parses an HTTP response from a ExternalClusterAPIDrainNodeWithResponse call
func ParseExternalClusterAPIDrainNodeResponse(rsp *http.Response) (*ExternalClusterAPIDrainNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDrainNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DrainNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIReconcileClusterResponse parses an HTTP response from a ExternalClusterAPIReconcileClusterWithResponse call
func ParseExternalClusterAPIReconcileClusterResponse(rsp *http.Response) (*ExternalClusterAPIReconcileClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIReconcileClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ReconcileClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPITriggerResumeClusterResponse parses an HTTP response from a ExternalClusterAPITriggerResumeClusterWithResponse call
func ParseExternalClusterAPITriggerResumeClusterResponse(rsp *http.Response) (*ExternalClusterAPITriggerResumeClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPITriggerResumeClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1TriggerResumeClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIUpdateClusterTagsResponse parses an HTTP response from a ExternalClusterAPIUpdateClusterTagsWithResponse call
func ParseExternalClusterAPIUpdateClusterTagsResponse(rsp *http.Response) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIUpdateClusterTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1UpdateClusterTagsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPICreateClusterTokenResponse parses an HTTP response from a ExternalClusterAPICreateClusterTokenWithResponse call
func ParseExternalClusterAPICreateClusterTokenResponse(rsp *http.Response) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPICreateClusterTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1CreateClusterTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCleanupScriptTemplateResponse parses an HTTP response from a ExternalClusterAPIGetCleanupScriptTemplateWithResponse call
func ParseExternalClusterAPIGetCleanupScriptTemplateResponse(rsp *http.Response) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCleanupScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptTemplateResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptTemplateWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
