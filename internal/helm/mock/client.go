// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock_helm is a generated GoMock package.
package mock_helm

import (
	"context"
	"reflect"

	"github.com/castai/cluster-controller/internal/helm"
	"github.com/golang/mock/gomock"
	"helm.sh/helm/v3/pkg/action"
	"helm.sh/helm/v3/pkg/release"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetRelease mocks base method.
func (m *MockClient) GetRelease(opts helm.GetReleaseOptions) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", opts)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockClientMockRecorder) GetRelease(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockClient)(nil).GetRelease), opts)
}

// Install mocks base method.
func (m *MockClient) Install(ctx context.Context, opts helm.InstallOptions) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", ctx, opts)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Install indicates an expected call of Install.
func (mr *MockClientMockRecorder) Install(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockClient)(nil).Install), ctx, opts)
}

// Rollback mocks base method.
func (m *MockClient) Rollback(opts helm.RollbackOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockClientMockRecorder) Rollback(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockClient)(nil).Rollback), opts)
}

// Uninstall mocks base method.
func (m *MockClient) Uninstall(opts helm.UninstallOptions) (*release.UninstallReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", opts)
	ret0, _ := ret[0].(*release.UninstallReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockClientMockRecorder) Uninstall(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockClient)(nil).Uninstall), opts)
}

// Upgrade mocks base method.
func (m *MockClient) Upgrade(ctx context.Context, opts helm.UpgradeOptions) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", ctx, opts)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockClientMockRecorder) Upgrade(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockClient)(nil).Upgrade), ctx, opts)
}

// MockConfigurationGetter is a mock of ConfigurationGetter interface.
type MockConfigurationGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationGetterMockRecorder
}

// MockConfigurationGetterMockRecorder is the mock recorder for MockConfigurationGetter.
type MockConfigurationGetterMockRecorder struct {
	mock *MockConfigurationGetter
}

// NewMockConfigurationGetter creates a new mock instance.
func NewMockConfigurationGetter(ctrl *gomock.Controller) *MockConfigurationGetter {
	mock := &MockConfigurationGetter{ctrl: ctrl}
	mock.recorder = &MockConfigurationGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationGetter) EXPECT() *MockConfigurationGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConfigurationGetter) Get(namespace string) (*action.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", namespace)
	ret0, _ := ret[0].(*action.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigurationGetterMockRecorder) Get(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigurationGetter)(nil).Get), namespace)
}
